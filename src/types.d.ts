type VideoSource = {
  id: string;
  name: string;
};

type VideoInfo = {
  name: string;
  extension: string;
  fileSizeInBytes: number;
}

type GetVideosResponse = {
  label: string;
  color: string;
  files: VideoInfo[]
}

type RecordingType = {
  label: string;
  color: string;
};

type SelectedFile = {
  label: string;
  files: string[];
}
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on

// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}

interface VideoContext {
  getSources: () => Promise<VideoSource[]>;
  showSaveDialog: () => Promise<Electron.SaveDialogReturnValue>;
  saveFile: (blob: ArrayBuffer, selectedWorkspace?: string, folder?: string) => Promise<void>;
  getVideos: (recordingType: RecordingType[], selectedWorkspace?: string) => Promise<GetVideosResponse[]>;
  deleteVideos: (selectedFiles: SelectedFile[]) => Promise<void>;
  deleteFolder: (path: string) => Promise<void>;
}

interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  video: VideoContext;
}
